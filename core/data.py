# core/data.py
# Description: Functions for loading and processing the food database.

import pandas as pd
import streamlit as st
from collections import Counter
from typing import Dict, List

from .models import FoodItem
from config import CONFIG


@st.cache_data
def load_food_database(file_path: str) -> Dict[str, List[FoodItem]]:
    """
    Load the food database (generated by the USDA client) into nested dicts of
    FoodItem objects keyed by their category.
    """
    df = pd.read_csv(file_path)
    foods: Dict[str, List[FoodItem]] = {cat: [] for cat in CONFIG["nutrient_map"].keys()}

    for _, row in df.iterrows():
        category = row["category"]
        if category in foods:
            foods[category].append(
                FoodItem(
                    name=f"{row['name']} ({row['serving_unit']})",
                    calories=row["calories"],
                    protein=row["protein"],
                    carbs=row["carbs"],
                    fat=row["fat"],
                )
            )
    return foods


def assign_food_emojis(foods: Dict[str, List[FoodItem]], n_top: int = 3) -> Dict[str, List[FoodItem]]:
    """
    Rank foods for each macronutrient (and calories) across the ENTIRE database,
    determine overlaps, then attach the proper emoji to every FoodItem.

    Legend
    -------
    ü•á  Superfood                ‚Äì ranks in the global top-N of ‚â• 2 categories
    üí•  Nutrient + Calorie Dense ‚Äì high-calorie AND top-N of a nutrient
    üî•  High-Calorie             ‚Äì high-calorie only
    üí™  Top-protein source
    üçö  Top-carb source
    ü•ë  Top-fat source
    ü•¶  Top-micronutrient source (same rule as before, if you use it)
    """
    # -------- Flatten all FoodItems into a single list -----------------------
    all_items: List[FoodItem] = [food for sub in foods.values() for food in sub]

    # -------- Build global top-N lists for each property ---------------------
    def _top_n(items, attr, n=n_top):
        return sorted(items, key=lambda x: getattr(x, attr), reverse=True)[:n]

    top_protein = [f.name for f in _top_n(all_items, "protein")]
    top_carbs   = [f.name for f in _top_n(all_items, "carbs")]
    top_fat     = [f.name for f in _top_n(all_items, "fat")]
    top_cals    = [f.name for f in _top_n(all_items, "calories")]

    # (Optional) top list for micronutrients can be kept if you calculate it
    top_micro: List[str] = []   # placeholder ‚Äì keep empty if you don‚Äôt track it

    # -------- Derive Superfood list -----------------------------------------
    appearance_counter = Counter(
        name
        for lst in [top_protein, top_carbs, top_fat, top_micro, top_cals]
        for name in lst
    )
    superfoods = {name for name, cnt in appearance_counter.items() if cnt >= 2}

    # -------- Emoji mapping & priority order --------------------------------
    emoji_map = {
        "superfood": "ü•á",
        "high_nutrient_cal": "üí•",
        "high_calorie": "üî•",
        "protein": "üí™",
        "carbs": "üçö",
        "fat": "ü•ë",
        "micro": "ü•¶",
        "": "",
    }

    # -------- Attach emojis to every FoodItem -------------------------------
    for food in all_items:
        is_high_calorie   = food.name in top_cals
        is_top_nutrient   = (
            food.name in top_protein
            or food.name in top_carbs
            or food.name in top_fat
            or food.name in top_micro
        )

        if food.name in superfoods:
            food.emoji = emoji_map["superfood"]
        elif is_high_calorie and is_top_nutrient:
            food.emoji = emoji_map["high_nutrient_cal"]
        elif is_high_calorie:
            food.emoji = emoji_map["high_calorie"]
        elif food.name in top_protein:
            food.emoji = emoji_map["protein"]
        elif food.name in top_carbs:
            food.emoji = emoji_map["carbs"]
        elif food.name in top_fat:
            food.emoji = emoji_map["fat"]
        elif food.name in top_micro:
            food.emoji = emoji_map["micro"]
        else:
            food.emoji = ""

    return foods
